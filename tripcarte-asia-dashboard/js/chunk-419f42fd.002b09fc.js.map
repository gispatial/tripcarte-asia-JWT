{"version":3,"sources":["webpack:///./node_modules/vue-barcode-scanner/index.js","webpack:///./src/views/components/vuesax/dialogs/Dialogs.vue?895f","webpack:///./src/views/components/vuesax/dialogs/DialogsPrompt.vue?345c","webpack:///src/views/components/vuesax/dialogs/DialogsPrompt.vue","webpack:///./src/views/components/vuesax/dialogs/DialogsPrompt.vue?f1a4","webpack:///./src/views/components/vuesax/dialogs/DialogsPrompt.vue","webpack:///src/views/components/vuesax/dialogs/Dialogs.vue","webpack:///./src/views/components/vuesax/dialogs/Dialogs.vue?f2f3","webpack:///./src/views/components/vuesax/dialogs/Dialogs.vue"],"names":["VueBarcodeScanner","Vue","options","attributes","previousCode","barcode","setting","sound","soundSrc","scannerSensitivity","requiredAttr","controlSequenceKeys","callbackAfterTimeout","callback","hasListener","pressedTime","timeout","isInControlSequence","eventBus","isProcessing","addListener","type","removeListener","window","addEventListener","onInputScanned","removeEventListener","finishScanSequence","clearTimeout","triggerSound","emitEvent","handleControlBoundaryKeydown","controlSequenceRegex","RegExp","join","payload","$emit","event","controlRegex","keyCode","test","key","checkInputElapsedTime","Date","now","barcodeIdentifier","target","getNamedItem","length","setTimeout","preventDefault","timestamp","push","timeElapsed","shift","audio","Audio","play","sensitivity","prototype","$barcodeScanner","init","destroy","getPreviousCode","setSensitivity","module","exports","render","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","staticClass","on","$event","activePrompt","_v","model","value","$$v","code","expression","activePrompt2","_s","val","close","validName","clearValMultiple","acceptAlert","slot","data","valMultipe","value1","value2","computed","methods","$vs","notify","color","title","text","component"],"mappings":"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","file":"js/chunk-419f42fd.002b09fc.js","sourcesContent":["const VueBarcodeScanner = {\r\n  install (Vue, options) {\r\n    /* global Audio */\r\n    // default plugin setting\r\n    let attributes = {\r\n      previousCode: '',\r\n      barcode: '',\r\n      setting: {\r\n        sound: false,\r\n        soundSrc: '',\r\n        scannerSensitivity: 100,\r\n        requiredAttr: false,\r\n        // `controlSequenceKeys` should be an array of Strings ([String])\r\n        // that will be joined in a regex string for identifying\r\n        // control sequences\r\n        //\r\n        // they will be replaced in the return string by tags\r\n        // example:\r\n        //   NumLock, 0, 0, 1, 3, NumLock\r\n        //   is replaced with\r\n        //   <VControlSequence>0013</VControlSequence>\r\n        //\r\n        // this allows easy string replacement\r\n        controlSequenceKeys: null,\r\n        // Some scanners do not end their sequence with the ENTER key.\r\n        // This option allows \"finishing\" the sequence without an ENTER key\r\n        // after the number of ms defined in `setting.scannerSensitivity`\r\n        // elapses after the last character in the sequence.\r\n        // Example:\r\n        // (without timeout, sequence ends with ENTER):\r\n        //   1. Scan barcode\r\n        //   2. Scanner sends sequence of characters to device, ending with ENTER (13) key\r\n        //   3. `callback` passed in `init()` is called\r\n        // (without timeout, sequence ends without ENTER):\r\n        //   1. Scan barcode\r\n        //   2. Scanner sends sequence of characters to device. Final character is not ENTER\r\n        //   3. `callback` is not called until the ENTER key is pressed\r\n        // (with timeout, sequence ends without ENTER):\r\n        //   1. Scan barcode\r\n        //   2. Scanner sends sequence of characters to device. Final character is not ENTER\r\n        //   3. After `setting.scannerSensitivity` ms elapses, `callback` is called\r\n        callbackAfterTimeout: false\r\n      },\r\n      callback: null,\r\n      hasListener: false,\r\n      pressedTime: [],\r\n      // This is used for scanners which do not send\r\n      // ENTER (13) as the final key code\r\n      // in a barcode sequence.\r\n      timeout: null,\r\n      // Used to handle control sequences\r\n      isInControlSequence: false,\r\n      // Used to emit messages\r\n      eventBus: null,\r\n      // Used for determing whether or not to emit a `start` event\r\n      isProcessing: false,\r\n    }\r\n\r\n    // initial plugin setting\r\n    if (options) {\r\n      attributes.setting.requiredAttr = options.requiredAttr || false\r\n      attributes.setting.sound = options.sound || attributes.setting.sound\r\n      attributes.setting.soundSrc = options.soundSrc || attributes.setting.soundSrc\r\n      attributes.setting.scannerSensitivity = options.sensitivity || attributes.setting.scannerSensitivity\r\n      attributes.setting.controlSequenceKeys = options.controlSequenceKeys || null\r\n      attributes.setting.callbackAfterTimeout = options.callbackAfterTimeout || false\r\n    }\r\n\r\n    Vue.prototype.$barcodeScanner = {}\r\n\r\n    Vue.prototype.$barcodeScanner.init = (callback, options = {}) => {\r\n      // add listenter for scanner\r\n      // use keypress to separate lower/upper case character from scanner\r\n      addListener('keypress')\r\n      // use keydown only to detect Tab event (Tab cannot be detected using keypress)\r\n      addListener('keydown')\r\n      attributes.callback = callback\r\n\r\n      // allow an event bus to be passed back to the caller\r\n      //\r\n      // this is an `init` option because whomever is implementing\r\n      // this plugin may not want to create additional Vue instances\r\n      // on every component, but would like to have access to a bus\r\n      // under some circumstances\r\n      //\r\n      // the importance of this is greater when scanning 2D\r\n      // barcodes, which take significantly longer (>=4 seconds)\r\n      // than 1D barcodes and some kind of indication of\r\n      // what the library is doing is useful\r\n      if (options.eventBus) {\r\n        attributes.eventBus = new Vue()\r\n        return attributes.eventBus\r\n      }\r\n    }\r\n\r\n    Vue.prototype.$barcodeScanner.destroy = () => {\r\n      // remove listener\r\n      removeListener('keypress')\r\n      removeListener('keydown')\r\n    }\r\n\r\n    Vue.prototype.$barcodeScanner.hasListener = () => {\r\n      return attributes.hasListener\r\n    }\r\n\r\n    Vue.prototype.$barcodeScanner.getPreviousCode = () => {\r\n      return attributes.previousCode\r\n    }\r\n\r\n    Vue.prototype.$barcodeScanner.setSensitivity = (sensitivity) => {\r\n      attributes.setting.scannerSensitivity = sensitivity\r\n    }\r\n\r\n    function addListener (type) {\r\n      if (attributes.hasListener) {\r\n        removeListener(type)\r\n      }\r\n      window.addEventListener(type, onInputScanned)\r\n      attributes.hasListener = true\r\n    }\r\n\r\n    function removeListener (type) {\r\n      if (attributes.hasListener) {\r\n        window.removeEventListener(type, onInputScanned)\r\n        attributes.hasListener = false\r\n      }\r\n    }\r\n\r\n    // this is called when either an ENTER key (13) is received\r\n    // or when the `attributes.timeout` fires, following\r\n    // a scan sequence\r\n    function finishScanSequence () {\r\n      // clear and null the timeout\r\n      if (attributes.timeout) {\r\n        clearTimeout(attributes.timeout)\r\n      }\r\n      attributes.timeout = null\r\n\r\n      // scanner is done and trigger Enter/Tab then clear barcode and play the sound if it's set as true\r\n      attributes.callback(attributes.barcode)\r\n      // backup the barcode\r\n      attributes.previousCode = attributes.barcode\r\n      // clear textbox\r\n      attributes.barcode = ''\r\n      // clear pressedTime\r\n      attributes.pressedTime = []\r\n      // trigger sound\r\n      if (attributes.setting.sound) {\r\n        triggerSound()\r\n      }\r\n      emitEvent(\"finish\")\r\n      attributes.isProcessing = false\r\n    }\r\n\r\n    // if entering a control sequence, add `<VControlSequence>` to the buffer\r\n    // if exiting a control sequence, add `</VControlSequence>` to the buffer\r\n    // toggle control sequence flag\r\n    function handleControlBoundaryKeydown () {\r\n      attributes.barcode += attributes.isInControlSequence\r\n        ? \"</VControlSequence>\"\r\n        : \"<VControlSequence>\"\r\n\r\n      attributes.isInControlSequence = !attributes.isInControlSequence\r\n    }\r\n\r\n    // Returns a regex or null\r\n    function controlSequenceRegex () {\r\n      if (attributes.setting.controlSequenceKeys) {\r\n        return new RegExp(attributes.setting.controlSequenceKeys.join(\"|\"))\r\n      }\r\n      return null\r\n    }\r\n\r\n    function emitEvent (type, payload) {\r\n      if (attributes.eventBus) {\r\n        attributes.eventBus.$emit(type, payload)\r\n      }\r\n    }\r\n\r\n    function onInputScanned (event) {\r\n      const controlRegex = controlSequenceRegex()\r\n\r\n      // ignore other keydown event that is not a TAB, so there are no duplicate keys\r\n      if (event.type === 'keydown' && event.keyCode !== 9) {\r\n        // Return early if this is not a control key that should be observed\r\n        if (controlRegex && !controlRegex.test(event.key)) return\r\n        // Return early if no control keys should be observed\r\n        if (!controlRegex) return\r\n      }\r\n\r\n      // handle control boundary keydown\r\n      if (event.type === 'keydown' && controlRegex && controlRegex.test(event.key)) {\r\n        return handleControlBoundaryKeydown()\r\n      }\r\n\r\n      if (checkInputElapsedTime(Date.now())) {\r\n        if (!attributes.isProcessing) {\r\n          emitEvent(\"start\", event)\r\n          attributes.isProcessing = true\r\n        }\r\n        // check if field has 'data-barcode' attribute\r\n        let barcodeIdentifier = false\r\n        if (attributes.setting.requiredAttr) {\r\n          barcodeIdentifier = event.target.attributes.getNamedItem('data-barcode');\r\n        } else {\r\n          barcodeIdentifier = true\r\n        }\r\n        if (barcodeIdentifier && (event.keyCode === 13 || event.keyCode === 9) && attributes.barcode !== '') {\r\n          finishScanSequence()\r\n\r\n          // prevent TAB navigation for scanner\r\n          if (event.keyCode === 9 || event.keyCode === 13) {\r\n            event.preventDefault()\r\n          }\r\n        } else {\r\n          // reset the finish sequence timer and add the key to the buffer\r\n          if (attributes.timeout) {\r\n            clearTimeout(attributes.timeout)\r\n          }\r\n          attributes.timeout =\r\n            attributes.setting.callbackAfterTimeout &&\r\n            // ensure there are characters in the buffer\r\n            // otherwise, the callback will always fire\r\n            attributes.barcode.length > 0 &&\r\n            setTimeout(finishScanSequence, attributes.setting.scannerSensitivity)\r\n\r\n          // scan and validate each character\r\n          attributes.barcode += event.key\r\n        }\r\n      }\r\n    }\r\n\r\n    // check whether the keystrokes are considered as scanner or human\r\n    function checkInputElapsedTime (timestamp) {\r\n      // push current timestamp to the register\r\n      attributes.pressedTime.push(timestamp)\r\n      // when register is full (ready to compare)\r\n      if (attributes.pressedTime.length === 2) {\r\n        // compute elapsed time between 2 keystrokes\r\n        let timeElapsed = attributes.pressedTime[1] - attributes.pressedTime[0];\r\n        // too slow (assume as human)\r\n        if (timeElapsed >= attributes.setting.scannerSensitivity) {\r\n          // put latest key char into barcode\r\n          attributes.barcode = event.key\r\n          // remove(shift) first timestamp in register\r\n          attributes.pressedTime.shift()\r\n          // not fast enough\r\n          return false\r\n        }\r\n        // fast enough (assume as scanner)\r\n        else {\r\n          // reset the register\r\n          attributes.pressedTime = []\r\n        }\r\n      }\r\n      // not able to check (register is empty before pushing) or assumed as scanner\r\n      return true\r\n    }\r\n\r\n    // init audio and play\r\n    function triggerSound () {\r\n      let audio = new Audio(attributes.setting.soundSrc)\r\n      audio.play()\r\n    }\r\n  }\r\n}\r\n\r\n// // Automatic installation if Vue has been added to the global scope.\r\n// if (typeof window !== 'undefined' && window.Vue) {\r\n//   window.Vue.use(MyPlugin)\r\n// }\r\n\r\nmodule.exports = VueBarcodeScanner\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"dialog-demo\"}},[_c('dialogs-prompt')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('vx-card',{attrs:{\"title\":\"Scan QR code\"}},[_c('p'),_c('div',{staticClass:\"demo-alignment\"},[_c('vs-button',{attrs:{\"color\":\"primary\",\"type\":\"border\"},on:{\"click\":function($event){_vm.activePrompt = true}}},[_vm._v(\"Start Scanning\")]),_c('div',{staticClass:\"vx-col w-full sm:w-1/1 md:w-1/1 lg:w-1/1 xl:w-1/1 mb-base\"},[_c('div',[_c('h5',[_vm._v(\"Or\")])]),_c('div',{staticClass:\"demo-alignment\"},[_c('div',{staticClass:\"con-exemple-prompt\"},[_c('vs-input',{staticClass:\"mt-3 w-full\",attrs:{\"placeholder\":\"Enter barcode\",\"vs-placeholder\":\"Enter barcode\"},model:{value:(_vm.code),callback:function ($$v) {_vm.code=$$v},expression:\"code\"}}),_c('vs-button',{attrs:{\"color\":\"primary\",\"type\":\"border\"},on:{\"click\":function($event){_vm.activePrompt2 = true}}},[_vm._v(\"Go\")])],1)])]),_c('div',[_c('p')]),_c('div',[_c('div',{staticClass:\"op-block\"},[_vm._v(\"Results: \"+_vm._s(_vm.val == null ? 'null' : _vm.code))])])],1),_c('vs-prompt',{attrs:{\"active\":_vm.activePrompt},on:{\"close\":_vm.close,\"update:active\":function($event){_vm.activePrompt=$event}}},[_c('div',{staticClass:\"p-8\"},[_c('iframe',{attrs:{\"src\":\"/components/tabs\",\"frameborder\":\"0\",\"width\":\"328\",\"height\":\"490\",\"scrolling\":\"auto\"}})])]),_c('vs-prompt',{attrs:{\"is-valid\":_vm.validName,\"active\":_vm.activePrompt2},on:{\"cancel\":_vm.clearValMultiple,\"accept\":_vm.acceptAlert,\"close\":_vm.close,\"update:active\":function($event){_vm.activePrompt2=$event}}},[_c('div',{},[_vm._v(\"\\n\\t\\t\\t\\tScan your barcode now to \"),_c('b',[_vm._v(\"continue\")]),_c('vs-alert',{staticClass:\"mt-4\",attrs:{\"active\":!_vm.validName,\"color\":\"danger\",\"vs-icon\":\"new_releases\"}},[_c('label',[_vm._v(\"Result:\")]),_c('barcode',{attrs:{\"options\":_vm.options},model:{value:(_vm.code),callback:function ($$v) {_vm.code=$$v},expression:\"code\"}}),_c('div')],1)],1)]),_c('template',{slot:\"codeContainer\"},[_vm._v(\"\\n<template>\\n    <div class=\\\"demo-alignment\\\">\\n      <vs-button @click=\\\"activePrompt = true\\\" color=\\\"primary\\\" type=\\\"border\\\">Run prompt</vs-button>\\n      <vs-button @click=\\\"activePrompt2 = true\\\" color=\\\"primary\\\" type=\\\"border\\\">Run prompt inputs</vs-button>\\n      <div class=\\\"op-block\\\">Security Code: \"+_vm._s(\"\\{\\{ val == null ? 'null' : val \\}\\}\")+\" </div>\\n      <div class=\\\"op-block\\\">\\n        Name: \"+_vm._s(\"\\{\\{ valMultipe.value1 \\}\\}\")+\" | Last Name: \"+_vm._s(\"\\{\\{ valMultipe.value2 \\}\\}\")+\"\\n      </div>\\n\\n    </div>\\n\\n    <vs-prompt\\n      @cancel=\\\"val=''\\\"\\n      @close=\\\"close\\\"\\n      :active.sync=\\\"activePrompt\\\">\\n      <div class=\\\"con-exemple-prompt\\\">\\n        <span>Enter the security code</span>\\n      <vs-input placeholder=\\\"Code\\\" vs-placeholder=\\\"Code\\\" v-model=\\\"val\\\" class=\\\"mt-3 w-full\\\" />\\n      </div>\\n    </vs-prompt>\\n\\n    <vs-prompt\\n      @cancel=\\\"clearValMultiple\\\"\\n      @close=\\\"close\\\"\\n      :is-valid=\\\"validName\\\"\\n      :active.sync=\\\"activePrompt2\\\">\\n      <div class=\\\"con-exemple-prompt\\\">\\n        Enter your first and last name to <b>continue</b>.\\n      <vs-input placeholder=\\\"Name\\\" v-model=\\\"valMultipe.value1\\\" class=\\\"mt-4 mb-2 w-full\\\" />\\n      <vs-input placeholder=\\\"Last Name\\\" v-model=\\\"valMultipe.value2\\\" class=\\\"w-full\\\" />\\n\\n      <vs-alert :vs-active=\\\"!validName\\\" color=\\\"danger\\\" vs-icon=\\\"new_releases\\\" >\\n        Fields can not be empty please enter the data\\n      </vs-alert>\\n      </div>\\n    </vs-prompt>\\n</template>\\n\\n<script>\\nexport default {\\n  data(){\\n    return {\\n      activePrompt:false,\\n      activePrompt2:false,\\n      val:'',\\n      valMultipe:{\\n        value1:'',\\n        value2:''\\n      },\\n    }\\n  },\\n  computed:{\\n    validName(){\\n      return (this.valMultipe.value1.length > 0 && this.valMultipe.value2.length > 0)\\n    }\\n  },\\n  methods:{\\nasync onDetect (promise) {\\n\\ttry {\\n\\t\\tconst {\\n\\t\\t\\timageData,\\n\\t\\t\\tcontent,\\n\\t\\t\\tlocation\\n\\t\\t} = await promise\\n\\n\\t\\tif (content === null) {\\n\\t\\t\\t // decoded nothing\\n\\t\\t} else {\\n\\t\\t\\t // ...\\n\\t\\t}\\n\\t} catch (error) {\\n\\t\\t// ...\\n\\t}\\n}\\n},\\n    close(){\\n      this.$vs.notify({\\n        color:'danger',\\n        title:'Closed',\\n        text:'You close a dialog!'\\n      })\\n    },\\n    clearValMultiple() {\\n      this.valMultipe.value1 = \\\"\\\";\\n      this.valMultipe.value2 = \\\"\\\";\\n    }\\n  }\\n}\\n</script>\\n\\t\\t\")])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!-- =========================================================================================\n\tFile Name: DialogsPrompt.vue\n\tDescription: Add dialog of type prompt\n\t----------------------------------------------------------------------------------------\n\tItem Name: Tripcarte.Asia Dashboard Management Portal\n\tAuthor: Netquest\n\tAuthor URL: http://demo.tripcarte.asia/\n========================================================================================== -->\n\n\n<template>\n\t<vx-card title=\"Scan QR code\">\n\n\t\t<p>\n\n\t\t<div class=\"demo-alignment\">\n\t\t<vs-button @click=\"activePrompt = true\" color=\"primary\" type=\"border\">Start Scanning</vs-button>\n\t\t<div class=\"vx-col w-full sm:w-1/1 md:w-1/1 lg:w-1/1 xl:w-1/1 mb-base\">\n    <div>\n\t\t<h5>Or</h5>\n\t\t</div>\n\t\t<div class=\"demo-alignment\"></span\n\t\t<barcode v-model=\"code\"></barcode>\n\t\t<div class=\"con-exemple-prompt\"><vs-input placeholder=\"Enter barcode\" vs-placeholder=\"Enter barcode\" v-model=\"code\" class=\"mt-3 w-full\" />\n\n\t\t<vs-button @click=\"activePrompt2 = true\" color=\"primary\" type=\"border\">Go</vs-button>\n\t\t</div>\n\t\t</div>\n\n\t\t</div>\n\n\t\t<div>\n\t\t<p>\n\t\t</p>\n  </div>\n  <div><div class=\"op-block\">Results: {{ val == null ? 'null' : code }}</div>\n  </div>\n</div>\n\n\t\t<vs-prompt\n\t\t\t@close=\"close\"\n\t\t\t:active.sync=\"activePrompt\">\n\t\t\t\t\t<div class=\"p-8\">\n\t\t\t\t\t<iframe src=\"/components/tabs\" frameborder=\"0\" width=\"328\" height=\"490\" scrolling=\"auto\">\n\t\t\t</iframe>\n\t\t\t\t\t</div>\n\n\t\t</vs-prompt>\n\n\t\t<vs-prompt\n\t\t\t@cancel=\"clearValMultiple\"\n\t\t\t@accept=\"acceptAlert\"\n\t\t\t@close=\"close\"\n\t\t\t:is-valid=\"validName\"\n\t\t\t:active.sync=\"activePrompt2\">\n\t\t\t<div class=\"\">\n\t\t\t\tScan your barcode now to <b>continue</b>\n\t\t\t<vs-alert :active=\"!validName\" color=\"danger\" vs-icon=\"new_releases\" class=\"mt-4\" >\n\n\t\t\t<label>Result:</label>\n\t\t\t<barcode v-model=\"code\" :options=\"options\"></barcode>\n<div>\n</div>\n\t\t\t</vs-alert>\n\t\t\t</div>\n\t\t</vs-prompt>\n\n\t\t<template slot=\"codeContainer\">\n&lt;template&gt;\n    &lt;div class=&quot;demo-alignment&quot;&gt;\n      &lt;vs-button @click=&quot;activePrompt = true&quot; color=&quot;primary&quot; type=&quot;border&quot;&gt;Run prompt&lt;/vs-button&gt;\n      &lt;vs-button @click=&quot;activePrompt2 = true&quot; color=&quot;primary&quot; type=&quot;border&quot;&gt;Run prompt inputs&lt;/vs-button&gt;\n      &lt;div class=&quot;op-block&quot;&gt;Security Code: {{ \"\\{\\{ val == null ? 'null' : val \\}\\}\" }} &lt;/div&gt;\n      &lt;div class=&quot;op-block&quot;&gt;\n        Name: {{ \"\\{\\{ valMultipe.value1 \\}\\}\" }} | Last Name: {{ \"\\{\\{ valMultipe.value2 \\}\\}\" }}\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n\n    &lt;vs-prompt\n      @cancel=&quot;val=''&quot;\n      @close=&quot;close&quot;\n      :active.sync=&quot;activePrompt&quot;&gt;\n      &lt;div class=&quot;con-exemple-prompt&quot;&gt;\n        &lt;span&gt;Enter the security code&lt;/span&gt;\n      &lt;vs-input placeholder=&quot;Code&quot; vs-placeholder=&quot;Code&quot; v-model=&quot;val&quot; class=&quot;mt-3 w-full&quot; /&gt;\n      &lt;/div&gt;\n    &lt;/vs-prompt&gt;\n\n    &lt;vs-prompt\n      @cancel=&quot;clearValMultiple&quot;\n      @close=&quot;close&quot;\n      :is-valid=&quot;validName&quot;\n      :active.sync=&quot;activePrompt2&quot;&gt;\n      &lt;div class=&quot;con-exemple-prompt&quot;&gt;\n        Enter your first and last name to &lt;b&gt;continue&lt;/b&gt;.\n      &lt;vs-input placeholder=&quot;Name&quot; v-model=&quot;valMultipe.value1&quot; class=&quot;mt-4 mb-2 w-full&quot; /&gt;\n      &lt;vs-input placeholder=&quot;Last Name&quot; v-model=&quot;valMultipe.value2&quot; class=&quot;w-full&quot; /&gt;\n\n      &lt;vs-alert :vs-active=&quot;!validName&quot; color=&quot;danger&quot; vs-icon=&quot;new_releases&quot; &gt;\n        Fields can not be empty please enter the data\n      &lt;/vs-alert&gt;\n      &lt;/div&gt;\n    &lt;/vs-prompt&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data(){\n    return {\n      activePrompt:false,\n      activePrompt2:false,\n      val:'',\n      valMultipe:{\n        value1:'',\n        value2:''\n      },\n    }\n  },\n  computed:{\n    validName(){\n      return (this.valMultipe.value1.length &gt; 0 &amp;&amp; this.valMultipe.value2.length &gt; 0)\n    }\n  },\n  methods:{\nasync onDetect (promise) {\n\ttry {\n\t\tconst {\n\t\t\timageData,\n\t\t\tcontent,\n\t\t\tlocation\n\t\t} = await promise\n\n\t\tif (content === null) {\n\t\t\t // decoded nothing\n\t\t} else {\n\t\t\t // ...\n\t\t}\n\t} catch (error) {\n\t\t// ...\n\t}\n}\n},\n    close(){\n      this.$vs.notify({\n        color:'danger',\n        title:'Closed',\n        text:'You close a dialog!'\n      })\n    },\n    clearValMultiple() {\n      this.valMultipe.value1 = &quot;&quot;;\n      this.valMultipe.value2 = &quot;&quot;;\n    }\n  }\n}\n&lt;/script&gt;\n\t\t</template>\n\n\t</vx-card>\n</template>\n\n\n<script>\n    module.exports = {\n      data: function () {\n        return {\n          scanned: ''\n        }\n      },\n      methods: {\n        codeScanned (event) {\n          this.scanned = event.detail[0];\n        }\n      }\n    }\n</script>\n\t\t<script>\n\t\texport default {\n\t\t  data() {\n\t\t    return {\n\t\t      colorx:\"#F57E7E\",\n\t\t      popupActive: false,\n\t\t    }\n\t\t  }\n\t\t}\n\t\t</script>\n\n<script>\nimport Vue from 'vue'\nimport VueBarcodeScanner from 'vue-barcode-scanner'\n\nVue.use(VueBarcodeScanner)\n\nexport default {\n  data(){\n    return {\n      activePrompt:false,\n      activePrompt2:false,\n      val:'',\n      valMultipe:{\n        value1:'',\n        value2:''\n      },\n    }\n  },\n  computed:{\n    validName(){\n      return (this.valMultipe.value1.length > 0 && this.valMultipe.value2.length > 0)\n    }\n  },\n  methods:{\n    acceptAlert(){\n      this.$vs.notify({\n        color:'success',\n        title:'Scan Accepted',\n        text:'Please check your status'\n      })\n    },\n    close(){\n      this.$vs.notify({\n        color:'danger',\n        title:'Closed',\n        text:'You close the scanner | qrcode'\n      })\n    },\n    clearValMultiple() {\n      this.valMultipe.value1 = \"\";\n      this.valMultipe.value2 = \"\";\n    }\n  }\n}\n</script>\n\n\nimport { QrcodeStream } from 'vue-qrcode-reader'\n\nexport default {\n\n  components: { QrcodeStream },\n\n  data () {\n    return {\n      result: '',\n      error: ''\n    }\n  },\n\n  methods: {\n    onDecode (result) {\n      this.result = result\n    },\n\n    async onInit (promise) {\n      try {\n        await promise\n      } catch (error) {\n        if (error.name === 'NotAllowedError') {\n          this.error = \"ERROR: you need to grant camera access permisson\"\n        } else if (error.name === 'NotFoundError') {\n          this.error = \"ERROR: no camera on this device\"\n        } else if (error.name === 'NotSupportedError') {\n          this.error = \"ERROR: secure context required (HTTPS, localhost)\"\n        } else if (error.name === 'NotReadableError') {\n          this.error = \"ERROR: is the camera already in use?\"\n        } else if (error.name === 'OverconstrainedError') {\n          this.error = \"ERROR: installed cameras are not suitable\"\n        } else if (error.name === 'StreamApiNotSupportedError') {\n          this.error = \"ERROR: Stream API is not supported in this browser\"\n        }\n      }\n    }\n  }\n}\n\nQuagga.init({\n    inputStream : {\n      name : \"Live\",\n      type : \"LiveStream\",\n      target: document.querySelector('#yourElement')    /\n    },\n    decoder : {\n      readers : [\"code_128_reader\"]\n    }\n  }, function(err) {\n      if (err) {\n          console.log(err);\n          return\n      }\n      console.log(\"Initialization finished. Ready to start\");\n      Quagga.start();\n  });\n\n\tconst imgSrc = '01.png';\nconst imgDomId = 'img-to-decode';\n\ncodeReader\n  .decodeFromImage(imgDomId, imgSrc)\n  .then(result => console.log(result.text))\n  .catch(err => console.error(err));\n\n\n\tconst codeReader = new ZXing.BrowserQRCodeReader();\nconst videoSrc = 'your url to a video';\n\ncodeReader\n  .decodeFromVideo('video', videoSrc)\n  .then(result => console.log(result.text))\n  .catch(err => console.error(err));\n\n\n\texport default {\n    data: () => ({\n      loading: false\n    }),\n    created () {\n      // Pass an options object with `eventBus: true` to receive an eventBus back\n      // which emits `start` and `finish` events\n      const eventBus = this.$barcodeScanner.init(this.onBarcodeScanned, { eventBus: true })\n      if (eventBus) {\n        eventBus.$on('start', () => { this.loading = true })\n        eventBus.$on('finish', () => { this.loading = false })\n      }\n    },\n    destroyed () {\n      // Remove listener when component is destroyed\n      this.$barcodeScanner.destroy()\n    },\n    methods: {\n      // Create callback function to receive barcode when the scanner is already done\n      onBarcodeScanned (barcode) {\n        console.log(barcode)\n        // do something...\n      },\n      // Reset to the last barcode before hitting enter (whatever anything in the input box)\n      resetBarcode () {\n        let barcode = this.$barcodeScanner.getPreviousCode()\n        // do something...\n      }\n    }\n  }\n\n\tVue.component(tuiVueBarcode.name, tuiVueBarcode);\n\nconst app = new Vue({\n  el:'#app',\n  data() {\n    return {\n      code: 'lorem ipsum',\n      height: 100\n    }\n  },\n  computed: {\n    options() {\n      return {\n        height: this.height\n      }\n    }\n  }\n})\n\ndata () {\n  return {\n    camera: 'auto'\n  }\n},\n\nmethods: {\n  startFrontCamera () {\n    this.camera = 'front'\n  },\n\n  onCameraChange (promise) {\n    promise.catch(error => {\n      const cameraMissingError = error.name === 'OverconstrainedError'\n      const triedFrontCamera = this.camera === 'front'\n\n      if (triedFrontCamera && cameraMissingError) {\n      }\n    })\n  }\n},\n\n\n</script>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DialogsPrompt.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DialogsPrompt.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DialogsPrompt.vue?vue&type=template&id=53cf1fcd&\"\nimport script from \"./DialogsPrompt.vue?vue&type=script&lang=js&\"\nexport * from \"./DialogsPrompt.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n    <div id=\"dialog-demo\">\n        <dialogs-prompt></dialogs-prompt>\n    </div>\n</template>\n\n<script>\nimport DialogsPrompt from './DialogsPrompt.vue'\n\nexport default{\n    components: {\n        DialogsPrompt,\n    }\n}\n</script>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Dialogs.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Dialogs.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Dialogs.vue?vue&type=template&id=600ebfa1&\"\nimport script from \"./Dialogs.vue?vue&type=script&lang=js&\"\nexport * from \"./Dialogs.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}